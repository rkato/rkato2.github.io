<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ronald Kato</title>
    <atom:link href="http://example.com/feed.xml" rel="self" type="application/rss+xml"/>
    <link>http://example.com/</link>
    <description>For the things we have to learn, we learn by doing them</description>
    <pubDate>Tue, 11 Aug 2015 17:31:57 +0200</pubDate>
    
      <item>
        <title>What is a Skill?</title>
        <link>http://example.com/2015/08/09/What%20is%20a%20skill.html</link>
        <guid isPermaLink="true">http://example.com/2015/08/09/What%20is%20a%20skill.html</guid>
        <description>&lt;dl&gt;
&lt;img src=&quot;https://github.com/rkato/rkato.github.io/tree/master/img/skill.png&quot; alt=&quot;Skill Image&quot; /&gt;
&lt;/dl&gt;
&lt;p&gt;As I continued to investigate the next generation JavaScript SPA frameworks, I paused and thought about our continuous chase for the next framework. Always looking for the next shinny toy to play with. The question that arose in my head was: Does knowing Aurelia, Angular, Entity Framework, Nancy, Katana, React or (insert your latest framework of interest) qualify as a skill?&lt;/p&gt;

&lt;p&gt;Just as I was pondering this , I came across a recent post from &lt;a href=&quot;https://en.wikipedia.org/wiki/Robert_Cecil_Martin&quot;&gt;Uncle Bob&lt;/a&gt;, entitled &lt;a href=&quot;http://blog.cleancoder.com/&quot;&gt;‘Make the magic go away’&lt;/a&gt;. This blog post really resonates with me, in that it challenges us to think about the commitments that we are making when we choose a framework as the basis for our solution. If those commitments are huge, we often find ourself having to write alot of framework bound code to get things done.&lt;/p&gt;

&lt;p&gt;Frameworks tend to make huge promises upfront about how quickly a team will become productive, and indeed you will be able to demo something quickly, but at what cost? What are you really paying for that magic?&lt;/p&gt;

&lt;p&gt;The cost I often face is that business rules get spread across layers and it becomes difficult to know where the actual application lies in the system being designed. The consequence of this is that one is bound to a specific framework and cannot easily substitute it or better, write the required code themselves.&lt;/p&gt;

&lt;p&gt;You may argue that this is a design problem, but in a team, with members having different levels of experience,  it can be tricky to ensure your business knowledge is centralised.&lt;/p&gt;

&lt;p&gt;Then, there are the job adverts that mention framework after framework as a ‘skill’ required for the job. In some scenarios, it may be that the problem is already solved and it’s time for execution. But this is hardly the case. In all my projects, I have found that as I solve the problem, I learn something new. Something I cannot ignore. Something that screams out to change direction. This something will send you into directions that were never anticipated by the framework. Directions that require you to really write some code to solve your problem, no magic as Uncle Bob says.&lt;/p&gt;

&lt;p&gt;Therefore, the next time you are choosing your team members, it may be worthwhile considering whether that person can make the magic go away!&lt;/p&gt;
</description>
        <pubDate>Sun, 09 Aug 2015 00:00:00 +0200</pubDate>
      </item>
    
      <item>
        <title>Up and running with Aurelia</title>
        <link>http://example.com/2015/08/01/Auerlia.html</link>
        <guid isPermaLink="true">http://example.com/2015/08/01/Auerlia.html</guid>
        <description>&lt;p&gt;&lt;a href=&quot;http://aurelia.io&quot;&gt;Aurelia&lt;/a&gt; is the latest incarnation from &lt;a href=&quot;http://eisenbergeffect.bluespire.com/&quot;&gt;Rob Eisenberg&lt;/a&gt;. If you have used &lt;a href=&quot;http://durandaljs.com/&quot;&gt;Durandal 2.0&lt;/a&gt; and liked it, then this may just be the framework for your next App. I really liked Durandal 2.0, and used it on two projects before I dove into Angular 1.x.&lt;/p&gt;

&lt;p&gt;Aurelia’s documentation is quiet good, as a walk through of the “getting started” section went without a hitch. Setting up a modern JavaScript App using &lt;a href=&quot;https://nodejs.org/&quot;&gt;Node.js&lt;/a&gt; and boostrapping a project with – &lt;a href=&quot;http://yeoman.io/&quot;&gt;Yeoman&lt;/a&gt; is really a breeze and if you have not tried it, you should give it a go.&lt;/p&gt;

&lt;p&gt;I will be restructuring the default skeleton app to build a typical ecommerce app with the intention of pushing Aurelia to it’s limits. This should reveal all it’s capabilities. During this time I  will share my thoughts on the conventions of this framework, tasks such as routing, binding and templating. This should be fun and I will keep you posted.&lt;/p&gt;

</description>
        <pubDate>Sat, 01 Aug 2015 00:00:00 +0200</pubDate>
      </item>
    
      <item>
        <title>Next-generation JavaScript Client Frameworks / Libraries</title>
        <link>http://example.com/2015/03/07/nextgen-js.html</link>
        <guid isPermaLink="true">http://example.com/2015/03/07/nextgen-js.html</guid>
        <description>&lt;p&gt;The landscape of JavaScript frameworks / libraries is changing fast. What started out as way to handle the DOM better through
declarative data binding has evolved into a competitive niche with Google and Facebook pitching contrasting
ideas and un expected collaborations – &lt;a href=&quot;http://blogs.msdn.com/b/typescript/archive/2015/03/05/angular-2-0-built-on-typescript.aspx&quot;&gt;a Angular 2 is built on TypeScript&lt;/a&gt;. So with ES6 on the horizon this is how it looking:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Angular 2.0&lt;/li&gt;
  &lt;li&gt;Aurelia&lt;/li&gt;
  &lt;li&gt;Ember.js&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now you are probably thinking where is React on that list. The guys at React say that it’s the V in MVC. But what does this mean for dynamic client UIs?&lt;/p&gt;

&lt;p&gt;In the next couple of posts, I will explore this landscape with the intention of gaining a better understanding of where we may be heading. All I can say now is that will all these options, it’s a great time to be a client side developer.&lt;/p&gt;
</description>
        <pubDate>Sat, 07 Mar 2015 00:00:00 +0200</pubDate>
      </item>
    
  </channel>
</rss>
